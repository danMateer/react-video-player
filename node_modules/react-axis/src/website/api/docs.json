{
  "src/components/Axis.js": {
    "description": "A basic Axis component rendered into SVG. The component can be aligned using the\n`position` prop, to display it above, below, left or right of a chart or other\nvisualization. Scaling of the axis is done with the `min` and `max` props. The scale\ntype can be \"linear\" or \"log\", controlled with the `type` prop.\n\nOverall size of the SVG component is done with `width` and `height`. You can also control\nthe number of ticks with `tickCount` (for linear scales), the size of the ticks with\n`tickSize`.",
    "displayName": "Axis",
    "methods": [
      {
        "name": "renderAxisLabel",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderAxisLine",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderAxisTicks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderAxis",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"left\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The label to render."
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the rectangle to render into.",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of the rectangle to render into.",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"linear\"",
              "computed": false
            },
            {
              "value": "\"log\"",
              "computed": false
            },
            {
              "value": "\"power\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The type of the scale: \"linear\", \"log\" or \"power\".",
        "defaultValue": {
          "value": "\"linear\"",
          "computed": false
        }
      },
      "exponent": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The exponent if a power scale is used.",
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      },
      "format": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The d3 format for the tick labels. The default it to\ncompute this automatically from the scale."
      },
      "absolute": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply abs(value) to all values.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "tickSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The size of each tick mark.",
        "defaultValue": {
          "value": "5",
          "computed": false
        }
      },
      "tickExtend": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Extend the tick marks away from the tick label\nby this amount. This can be used to provide a grid\nline for each tick.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "tickCount": {
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "margin": {
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "standalone": {
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "labelPosition": {
        "defaultValue": {
          "value": "50",
          "computed": false
        }
      },
      "labelStyle": {
        "defaultValue": {
          "value": "{\n    fill: \"grey\",\n    stroke: \"none\",\n    pointerEvents: \"none\"\n}",
          "computed": false
        }
      }
    }
  },
  "src/components/Tick.js": {
    "description": "Builds an axis tick mark with associated label",
    "displayName": "Tick",
    "methods": [
      {
        "name": "renderLabel",
        "docblock": "___________   or __________\n      |                |label\n    label",
        "modifiers": [],
        "params": [
          {
            "name": "label"
          },
          {
            "name": "isTop"
          },
          {
            "name": "tickSize"
          }
        ],
        "returns": null,
        "description": "___________   or __________\n      |                |label\n    label"
      },
      {
        "name": "renderVerticalTick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "id",
            "type": null
          },
          {
            "name": "label",
            "type": null
          },
          {
            "name": "labelPosition",
            "type": null
          },
          {
            "name": "size",
            "type": null
          },
          {
            "name": "extend",
            "type": null
          },
          {
            "name": "isTop",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderHorizontalTick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "id",
            "type": null
          },
          {
            "name": "label",
            "type": null
          },
          {
            "name": "labelPosition",
            "type": null
          },
          {
            "name": "size",
            "type": null
          },
          {
            "name": "extend",
            "type": null
          },
          {
            "name": "isLeft",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "position": {
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "size": {
        "defaultValue": {
          "value": "15",
          "computed": false
        }
      },
      "align": {
        "defaultValue": {
          "value": "\"bottom\"",
          "computed": false
        }
      },
      "labelAlign": {
        "defaultValue": {
          "value": "\"adjacent\"",
          "computed": false
        }
      },
      "tickSize": {
        "defaultValue": {
          "value": "15",
          "computed": false
        }
      },
      "tickExtend": {
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      }
    }
  },
  "src/components/TimeAxis.js": {
    "description": "A TimeAxis component rendered into SVG. The component can be aligned using the\n`position` prop to the top or bottom.\n\nScaling of the axis is done with the `beginTime` and `endTime` props. These\nare Javascript Date objects.\n\nOverall size of the SVG component is done with `width` and `height`.\n\nThe `TimeAxis` has support for rendering in any timezone using the `timezone`\nprops. It defaults to local time.\n\nFor example:\n```\n <TimeAxis\n     beginTime={beginTime}\n     endTime={endTime}\n     timezone=\"America/Chicago\"\n     position=\"bottom\"\n     width={800}\n     height={50}\n />\n```\n\nThe format of the axis labels has an appropiate default. However, you\ncan use the `format` props to gain additional control, either with\nsome built in formats or by supplying a function.",
    "displayName": "TimeAxis",
    "methods": [
      {
        "name": "renderAxisLabel",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderAxisLine",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderAxisTicks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderAxis",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"left\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The title of the axis to render."
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the rectangle to render into.",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of the rectangle to render into.",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "format": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "\"second\"",
                  "computed": false
                },
                {
                  "value": "\"minute\"",
                  "computed": false
                },
                {
                  "value": "\"day\"",
                  "computed": false
                },
                {
                  "value": "\"month\"",
                  "computed": false
                },
                {
                  "value": "\"year\"",
                  "computed": false
                },
                {
                  "value": "\"duration\"",
                  "computed": false
                }
              ]
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "The format for the tick labels.\n\nThe default it to compute this automatically. You can also specify this\nas a string or function.\n\nSix special options exist, specified as a string: setting format to:\n * \"second\",\n * \"hour\"\n * \"day\"\n * \"month\"\n * \"year\"\n\nwill show only ticks on those, and every one of those intervals.\n\nFor example maybe you are showing a bar chart for October 2014 then setting\nthe format to \"day\" will insure that a label is placed for each and every day,\nall 31 of them. Be careful though, it's easy to add too many labels this way.\n\nThe last string option is:\n * \"duration\".\n\nThis interprets the time as a duration. This is good for data that is\nspecified relative to its start time, rather than as an actual date/time.\n\nFinally, format can also be a function. The function will be passed the date\nit is rendering. It expects the return result to be a an object describing\nthe resulting tick. For example:\n\n```js\n    format = (d) => ({\n        label: moment(d).format(h:mm a),\n        size: 15,\n        labelAlign: \"adjacent\"\n    });\n```"
      },
      "tickMinor": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The size of each minor tick mark.",
        "defaultValue": {
          "value": "14",
          "computed": false
        }
      },
      "tickMajor": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The size of each major tick mark.",
        "defaultValue": {
          "value": "20",
          "computed": false
        }
      },
      "tickExtend": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Extend the tick marks away from the tick label\nby this amount. This can be used to provide a grid\nline for each tick.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "tickCount": {
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "margin": {
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "standalone": {
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "labelPosition": {
        "defaultValue": {
          "value": "50",
          "computed": false
        }
      },
      "labelStyle": {
        "defaultValue": {
          "value": "{\n    fill: \"grey\",\n    stroke: \"none\",\n    pointerEvents: \"none\"\n}",
          "computed": false
        }
      },
      "absolute": {
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  }
}